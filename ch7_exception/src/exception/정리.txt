exception (예외)
발생시점
1. 컴파일 에러
   ㄴ 컴파일 시에 발생하는 에러

2. 런타임 에러
   ㄴ 실행 시에 발생하는 에러
   ㄴ error
      ㄴ 메모리 부족, 스택 오버플로우
   ㄴ exception
      ㄴ 수습가능

      object
        |
        |
    Throwable
        |
        |
|-------------------------------------------------------------|
Exception                                                   Error
  ㄴ IoException
  ㄴ ClassNotFoundException
  ㄴ RunTimeException
           ㄴ ArithmeticException
           ㄴ NullPointerException
                       .
                       .
                       .

//=================================================================================

-Exception 처리-
try ~ catch 문
여러개의 catch가능

try{
    예외가 발생할 가능성이 있는 문장 넣기
}[예외가날것같으면] catch (Exception ex){
    Exception 발생시 처리하기 위한 문장
}



catch 문 작성 시 다중 으로 가능
ㄴ catch (ArrayIndexOutOfBoundsException | ArithmeticException e)

try~catch~finally
ㄴ finally - 예외의 발생여부랑 상관없이 반드시 실행되어야 할 코드 작성할때
   ㄴ 리소스(입출력스트림, 소켓..)의 close() 호출 -> sc.close()

//================================================================================

-강제 예외-
Exception 사용
throw new Exception(")       // throw 사용


-예외 전달-
throw Exception


try -with-resources : 자동 리소스닫기
+ finally 에서 주로 자원닫기 구문을 실행 하면 자바 버전 1.7부터 자동 닫기을 지원함
finally로 개발자가 자원 닫기를 직접 명시하지 않아도 됨


try(자동으로 닫아야 하는 객체 생성) {     //try (FileInputStream fis2 = new FileInputStream("file txt"))

}catch (Exception){

}